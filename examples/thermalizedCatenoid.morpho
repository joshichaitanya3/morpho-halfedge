// Half edge mesh thermalizer

import optimize
import meshgen
import "thermalizer.morpho"
import gd 


var r = 1.0 // radius
var ratio = 0.4 // Separation to diameter ratio
var L = 2*r*ratio // Separation

// Generate a tube / cylindrical mesh
var mesh = AreaMesh(fn (u, v) [r*cos(u), v, r*sin(u)], 
                    -Pi...Pi:Pi/20,
                    -L/2..L/2:L/5, 
                    closed=[true,false]
)

mesh.addgrade(1)

var bnd = Selection(mesh, boundary=true)
Show(plotselection(mesh, bnd, grade=1))
// Show(plotmesh(mesh, grade=1) + plotmeshlabels(mesh) + plotmeshlabels(mesh, grade=2, color=Red))
// var mesh = GD(2,2).mesh()
// Get average length of a bond. 
// This can be used to set the size of random perturbations.
var lens = Length().integrand(mesh)
var l0 = lens.sum()/lens.count()
print "l0 = ${l0}"

// Show(plotmesh(mesh, grade=1))
var hMesh = HalfEdgeMesh(mesh)
// var hMesh = HalfEdgeMesh(mesh, ndims=2)

var therm = Thermalizer(hMesh, kappa=1e6, fixed=bnd)

print "Number of beads: ${mesh.count(0)}"
print "Number of bonds: ${mesh.count(1)}"
var nsteps = 1000000
for (i in 0...nsteps) {
    // nsuccesses = thermalizer.monteCarloStep(i, s=l0/10) // This step size s has chosen such that the fraction of successful step (see end of file) is ~0.5
    therm.monteCarloSweep(i, s=l0/1000, lmin=0.6*l0, lmax=1.3*l0, report=true) // This step size s has chosen such that the fraction of successful step (see end of file) is ~0.5

    // VTKExporter(mesh).export("data/Sphere_${i}.vtk")
    // hMesh.exportVTK("data/SphereFlipHardSphere_${i}.vtk")
    if (mod(i,100) == 0) hMesh.exportVTK("data/Catenoid_${Int(i/100)}.vtk")
}
