import starPerpSqMeanCurvature


var impl = ImplicitMeshBuilder(fn (x,y,z) x^2+y^2+z^2-1)
var mesh = impl.build(stepsize=0.5)
var mesh = GD(3,0).mesh()
var mcsq = SPSMeanCurvatureSq(h0=-0.5)

Show(plotmesh(mesh, grade=1))
var hMesh = HalfEdgeMesh(mesh)
var problem = OptimizationProblem(hMesh)

problem.addenergy(mcsq)

var opt = ShapeOptimizer(problem, hMesh)

opt.stepsize = 0.001
opt.steplimit = 0.01

// mesh.vertexmatrix().acc(-0.0001, grad)

// opt.quiet = true
print mcsq.total(hMesh)
var grad = mcsq.gradient(hMesh)
print grad.column(0).dimensions()
var force = opt.totalforcewithconstraints()
print force.column(0).dimensions()
var gradV = Field(mesh, Matrix([0,0,0]))
var forceV = Field(mesh, Matrix([0,0,0]))

for (i in 0...mesh.count()) {
    gradV[i] = -grad.column(i)
    forceV[i] = -force.column(i)
}
var vtkE = VTKExporter(gradV, fieldname="-GradE")
vtkE.addfield(forceV, fieldname = "Force")
vtkE.export("data/test_0.vtk")
opt.conjugategradient(10000)
for (i in 1..1) {
    // opt.linesearch(1000)
    // opt.relax(100)
    // var grad = mcsq.gradient(hMesh)

    // for (i in 0...mesh.count()) {
    //     gradV[i] = -grad.column(i)
    //     forceV[i] = -opt.force.column(i)
    // }
    // print "Iteration ${i}, Energy: ${mcsq.total(hMesh)}"
    // var vtkE = VTKExporter(gradV, fieldname="-GradE")
    // vtkE.addfield(forceV, fieldname = "Force")
    // vtkE.export("data/test_${i}.vtk")
    // VTKExporter(hMesh.mesh).export("data/test_${i}.vtk")
}
// mesh.addgrade(1)
// VTKExporter(mesh).export("test.vtk")
Show(plotmesh(hMesh.mesh, grade=1))
// print int 
// print mcsq.total(mesh)